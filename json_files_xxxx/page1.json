{"title":"Graph Theory - Strongly Connected Components","content":"\nThe concept of `strongly connected components` (SCCs) is analogous to connected components in an undirected graph.\n\nThe relationship $R$ defined by `mutual reachability` in a directed graph is an equivalent relationship. Each set from the partition induced by $R$ is referred to as a strongly connected component (SCC).\n\nIf we consider each set as a node, all SCCs togother form a graph known as the SCC graph. Such a SCC graph does not contain any directed cycles, making it a Directed Acyclic Graph (DAG).\n\nAlgorithms for finding strongly connected components in a directed graph are typically based on depth-first-search (DFS). Commonly used alogirhmths include Kosaraju's algorithm and Tarjan's alogorithm. Below is the code for the Tarjan's algorithm:\n\n```cpp\nvector<int> G[maxn];\nint pre[maxn], low_link[maxn], scc_no[maxn], dfs_clk, scc_cnt;\nstack<int> S;\nvoid dfs(int u){\n    pre[u] = low_link[u] = ++dfs_clk;\n    S.push(u);\n    FOR(i, 0, G[u].size() - 1){\n        int v = G[u][i];\n        if(!pre[v]){\n            dfs(v);\n            minimize(low_link[u], low_link[v]);\n        }else if(!scc_no[v]) minimize(low_link[u], pre[v]);\n    }\n    if(low_link[u] == pre[u]){\n        scc_cnt++;\n        while(true){\n            int x = S.top(); S.pop();\n            scc_no[x] = scc_cnt;\n            if(x == u) break;\n        }\n    }\n}\nvoid find_scc(int n){\n    dfs_clk = scc_cnt = 0;\n    clr(scc_no, 0), clr(pre, 0);\n    FOR(i, 0, n - 1) if(!pre[i]) dfs(i);\n}\n```\n\nSince each vertex belongs to exactly one SCC, we aim to output the SCC when we first visit a node within that SCC and complete the traversal. It is essential to determine whether a particular node is the first one discovered in its SCC. Similar to the method for computing biconnected components in an undirected graph, for each node $u$, we use $lowlink(u)$ to represent the value of $pre(v)$ for the earliest ancestor point $v$ that $u$ and its descendants can trace back to. Therefore, $u$ is the first discovered point if and only if $lowlink(u)$ equals $pre(u)$.\n","author":"pandoxone"}
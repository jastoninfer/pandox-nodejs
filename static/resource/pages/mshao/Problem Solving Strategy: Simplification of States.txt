KEYWORDS[[Machine Learning][PRML]]KEYWORDS

![demo](https://www.pandox.xyz/api/db/images/mshao/pexels-franki-frank-28991642.jpg "20")

State reduction is an extremely important method, particularly prevalent in applications of dynamic programming and combinatorial counting. Let’s first look at some exercises:

## LA 4380(CERC 2008) Counting Heaps

### Problem Statement

Given a rooted tree with $n$ nodes $(1 \leq n \leq 500000)$ , we need to assign labels to the nodes from $1$ to $n$ such that each node has a different label, and every non-root node has a label smaller than that of its parent (satisfying the heap property).

We are to find the total number of such labeling schemes modulo $m$ $(2 \leq m \leq 10^9)$ . When $n=5$ , there are $8$ such schemes.

### Solution

We can assign labels to the nodes in the following way: assign them in ascending order, with the smallest necessarily being the root of the tree, and the next smallest assigned to one of the root's children, and so on.
This means we provide a topological order that satisfies the condition where the parent node is smaller than all the child nodes.
We maintain a queue of nodes that can be assigned the smallest available label until the queue is empty, starting with only the root node in the queue.
By traversing all nodes once, we find a valid labeling scheme; however, while the method is feasible, it is inefficient due to its high complexity.
Why? Because we are considering too many details, and the cost of accommodating all these intricacies leads to an unbearable complexity.
Although this method is sufficient for finding the answer, it is not necessary.
Counting does not equal enumeration. 

So, what is a better method? We need to delve deeper into the essence of the problem.
In fact, this problem has a local property: if we fix the set of labels for all nodes in each subtree, then the total number of labeling schemes is determined, as satisfying the local topological order will not violate the overall structure.
The local relative order is already given by the shape of the subtree, and we do not need to know the specific labels assigned to each node, only their ranks. 

Let $f(i)$ represent the number of labeling schemes for the subtree rooted at node $i$ with a fixed set of candidate labels.
Considering a child node $j$ of $i$ , we denote the size of the subtree rooted at $u$ as $g(u)$ .
The number of ways to assign labels to node $j$ ’s subtree is given by $\textrm{C}_{g(i) - 1}^{g(j)}$ .
Thus, the total number of schemes for the subtree rooted at $j$ is $\textrm{C}_{g(i) - 1}^{g(j)}f(j)$ .
Therefore, the total number of schemes for the subtree rooted at $i$ can be expressed as the product of the total schemes for the remaining part (after removing the subtree of $j$ from $i$ ’s subtree) and the total schemes for subtree $j$ . 

This leads to the equation $f(i)=f(j)\textrm{C}_{g(i) - 1}^{g(j)}f(i\setminus j)$ , where $f(i\setminus g)$ represents the subtree obtained by removing $j$ from $i$ ’s subtree. Let $i$ ’s subtree have $p$ child nodes, with the $j$ -th child having $n_j$ nodes.
Applying the above formula, we can obtain $f(i)=\prod_{j=1}^{p}{f(n_j)\textrm{C}_{g(i)-1-\sum_{k<p}{g(n_k)}}^{g(n_j)}}$ , which allows us to solve the problem in $O(n)$ time.

At this point, we are still some distance away from solving the problem.
On one hand, we need to address the issue of computing the combination numbers modulo non-prime numbers (which can lead to TLE/WA), and on the other hand, we need to be cautious of stack overflow (RE).
For those interested in the specific implementation of the program, you can refer to the code below.

### Code

```cpp
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <ctime>
#include <cmath>
#include <iostream>
#include <assert.h>
#define PI acos(-1.)
#pragma comment(linker, "/STACK:102400000,102400000")
#define max(a, b) ((a) > (b) ? (a) : (b))
#define min(a, b) ((a) < (b) ? (a) : (b))
#define mp std :: make_pair
#define st first
#define nd second
#define keyn (root->ch[1]->ch[0])
#define lson (u << 1)
#define rson (u << 1 | 1)
#define pii std :: pair<int, int>
#define pll pair<ll, ll>
#define pb push_back
#define type(x) __typeof(x.begin())
#define foreach(i, j) for(type(j)i = j.begin(); i != j.end(); i++)
#define FOR(i, s, t) for(int i = (s); i <= (t); i++)
#define ROF(i, t, s) for(int i = (t); i >= (s); i--)
#define dbg(x) std::cout << x << std::endl
#define dbg2(x, y) std::cout << x << " " << y << std::endl
#define clr(x, i) memset(x, (i), sizeof(x))
#define maximize(x, y) x = max((x), (y))
#define minimize(x, y) x = min((x), (y))
//using namespace std;
typedef long long ll;
const int int_inf = 0x3f3f3f3f;
const ll ll_inf = 0x3f3f3f3f3f3f3f3f;
const int INT_INF = (int)((1ll << 31) - 1);
const double double_inf = 1e30;
const double eps = 1e-14;
typedef unsigned long long ul;
int debug = 1;
int dx[] = {0, 0, 1, 1};
int dy[] = {1, 0, 0, 1};
const int maxn = 5e5 + 10;
ll dp[maxn];
ll mod;
int n;
std::vector<int> G[maxn];
int sz[maxn];
int prime[maxn], k;
bool vis[maxn];
void pre_init(){
    k = 0;
    prime[k++] = 2;
    clr(vis, 0);
    for(int i = 3; i < maxn; i += 2){
        if(vis[i]) continue;
        prime[k++] = i;
        for(int j = i; j < maxn; j += i) vis[j] = 1;
    }
}
int cnt[maxn][30];
int p[maxn], pointer;
ll fac[maxn];
void init(){
    int tem = mod;
    int mid = (int)sqrt(mod + .5);
    pointer = 0;
    for(int i = 0; prime[i] <= mid; i++){
        if(tem % prime[i]) continue;
        p[pointer++] = prime[i];
        while(!(tem % prime[i])) tem /= prime[i];
        mid = (int)sqrt(tem + .5);
    }
    if(tem != 1) p[pointer++] = tem;
    clr(cnt, 0);
    FOR(i, 1, n){
        FOR(j, 0, pointer - 1) if(!(i % p[j])){
            int ti = i;
            while(!(ti % p[j])) ti /= p[j], ++cnt[i][j];
        }
    }
    FOR(i, 1, n) FOR(j, 0, pointer - 1) cnt[i][j] += cnt[i - 1][j];
    fac[0] = 1;
    FOR(i, 1, n){
        ll tem = i;
        FOR(j, 0, pointer - 1) while(tem % p[j] == 0) tem /= p[j];
        fac[i] = fac[i - 1] * tem % mod;
    }
}

ll power(ll a, ll p, ll mod){
    ll res = 1;
    a %= mod;
    while(p){
        if(p & 1) res = res * a % mod;
        p >>= 1;
        a = a * a % mod;
    }
    return res;
}

ll egcd(ll a, ll b, ll &x, ll &y){
    if(!b){
        x = 1, y = 0;
        return a;
    }else{
        ll r = egcd(b, a % b, y, x);
        y -= (a / b) * x;
        return r;
    }
}
int buf[30];
ll cal(int n, int m){
    FOR(i, 0, pointer - 1) buf[i] = cnt[n][i] - cnt[n - m][i] - cnt[m][i];
    ll tem = 1;
    FOR(i, 0, pointer - 1){
        int num = buf[i];
        while(num--) tem = tem * p[i] % mod;
    }
    tem = tem * fac[n] % mod;
    ll x, y;
    egcd(fac[n - m], mod, x, y);
    tem = tem * ((x % mod + mod) % mod) % mod;
    egcd(fac[m], mod, x, y);
    tem = tem * ((x % mod + mod) % mod) % mod;
    return tem;
}
//360041529
//-------------------------------------------------------------------------
int main(){
    //data_gen(); return 0;
    //C(); return 0;
    debug = 0;
    if(debug) freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    pre_init();
    int T = readint();
    while(T--){
        scanf("%d%lld", &n, &mod);
        init();
        FOR(i, 1, n) G[i].clear();
        FOR(i, 2, n){
            int x = readint();
            G[x].pb(i);
        }
        clr(sz, 0);
        ROF(i, n, 1){
            sz[i] = 1;
            int num = G[i].size();
            FOR(j, 0, num - 1) sz[i] += sz[G[i][j]];
            dp[i] = 1;
            int cur = sz[i] - 1;
            FOR(j, 0, num - 1){
                int v = G[i][j];
                dp[i] = dp[i] * dp[v] % mod * cal(cur, sz[v]) % mod;
                cur -= sz[v];
            }
        }
        //dfs(1);
        printf("%lld\n", dp[1]);
    }
    return 0;
}
```
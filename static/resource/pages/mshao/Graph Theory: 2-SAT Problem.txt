KEYWORDS[[ACM/ICPC][Graph Theory]]KEYWORDS

![demo](https://www.pandox.xyz/api/db/images/mshao/583px-Implication_graph.svg.png "50")

## The 2-SAT Problem

The 2-SAT problem is as follows: there are $n$ Boolean variables $x_i$, and there are $m$ conditions that need to be satisfied. Each condition is in the form " $x_i$ is true/false or $x_j$ is true/false".

For example, " $x_1$ is true or $x_3$ is false". Note that "or" here means that at least one of the two conditions must be true. For example, there are 3 combinations of $x_1$ and $x_3$ that satisfy " $x_1$ is true or $x_3$ is false".

The goal of the 2-SAT problem is to assign a value to each variable so that all conditions are satisfied.

## Solution

A common method to solve the 2-SAT problem is to construct a directed graph $G$, where each variable $x_i$ is split into two nodes, $2i$ and $2i+1$, representing $x_i$ being false and $x_i$ being true, respectively. Finally, we need to choose one node for each variable. For example, if node $2i$ is marked, it means $x_i$ is false; if node $2i+1$ is marked, it means $x_i$ is true. 

For a condition like " $x_i$ is false or $x_j$ is false", we draw a directed edge from $2i+1 \rightarrow 2j$, indicating that if node $2i+1$ is marked, then node $2j$ must also be marked. Similarly, we draw another directed edge from $2j+1 \rightarrow 2i$. For other conditions, edges can be drawn similarly. In other words, each condition corresponds to two "symmetric" edges.

Next, we consider each unassigned variable $x_i$. We first assume it to be false, then mark node $2i$, and mark all nodes that can be marked along the directed edges. If during the marking process we find that both nodes corresponding to a variable are marked, the assumption " $x_i$ is false" is invalid, and we need to change it to " $x_i$ is true" and re-mark.

Note that this algorithm does not involve backtracking. If the current variable, regardless of whether it is assigned true or false, causes a contradiction, it can be proven that the entire 2-SAT problem has no solution (even adjusting the previously assigned variables won't help). This is obvious, as each variable will only affect the expressions related to that variable, so the unassigned variables must be independent of the previous assignments. For the entire problem to have a solution, each block must have a solution.

## Code
Here is the code to solve the 2-SAT problem:

```cpp
struct _2_sat{
    int n;
    vector<int> G[maxn << 1];
    bool mark[maxn << 1];
    int S[maxn << 1], c;
    bool dfs(int x){
        if(mark[x ^ 1]) return 0;
        if(mark[x]) return 1;
        mark[x] = 1;
        S[c++] = x;
        FOR(i, 0, G[x].size() - 1) if(!dfs(G[x][i])) return 0;
        return 1;
    }
    void init(int n){
        this->n = n;
        FOR(i, 0, 2 * n - 1) G[i].clear();
        clr(mark, 0);
    }
    //x = xval or y = yval
    void add_caluse(int x, int xval, int y, int yval){
        x = x * 2 + xval, y = y * 2 + yval;
        G[x ^ 1].pb(y), G[y ^ 1].pb(x);
    }
    bool solve(){
        for(int i = 0; i < 2 * n; i += 2) if(!mark[i] && !mark[i + 1]){
            c = 0;
            if(!dfs(i)){
                while(c > 0) mark[S[--c]] = 0;
                if(!dfs(i + 1)) return 0;
            }
        }
        return 1;
    }
};
```
## Relevant Exercises

LA 3713 Astronauts

```cpp
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <stack>
#include <ctime>
#include <cmath>
#include <iostream>
#include <assert.h>
#pragma comment(linker, "/STACK:102400000,102400000")
#define max(a, b) ((a) > (b) ? (a) : (b))
#define min(a, b) ((a) < (b) ? (a) : (b))
#define mp std :: make_pair
#define st first
#define nd second
#define keyn (root->ch[1]->ch[0])
#define lson (u << 1)
#define rson (u << 1 | 1)
#define pii std :: pair<int, int>
#define pll pair<ll, ll>
#define pb push_back
#define type(x) __typeof(x.begin())
#define foreach(i, j) for(type(j)i = j.begin(); i != j.end(); i++)
#define FOR(i, s, t) for(int i = (s); i <= (t); i++)
#define ROF(i, t, s) for(int i = (t); i >= (s); i--)
#define dbg(x) std::cout << x << std::endl
#define dbg2(x, y) std::cout << x << " " << y << std::endl
#define clr(x, i) memset(x, (i), sizeof(x))
#define maximize(x, y) x = max((x), (y))
#define minimize(x, y) x = min((x), (y))
using namespace std;
typedef long long ll;
const int int_inf = 0x3f3f3f3f;
const ll ll_inf = 0x3f3f3f3f3f3f3f3f;
const int INT_INF = (int)((1ll << 31) - 1);
const double double_inf = 1e30;
const double eps = 1e-14;
typedef unsigned long long ul;
typedef unsigned int ui;
inline int readint(){
    int x;
    scanf("%d", &x);
    return x;
}
inline int readstr(char *s){
    scanf("%s", s);
    return strlen(s);
}

class cmpt{
public:
    bool operator () (const int &x, const int &y) const{
        return x > y;
    }
};

int Rand(int x, int o){
    //if o set, return [1, x], else return [0, x - 1]
    if(!x) return 0;
    int tem = (int)((double)rand() / RAND_MAX * x) % x;
    return o ? tem + 1 : tem;
}
ll ll_rand(ll x, int o){
    if(!x) return 0;
    ll tem = (ll)((double)rand() / RAND_MAX * x) % x;
    return o ? tem + 1 : tem;
}

void data_gen(){
    srand(time(0));
    freopen("in.txt", "w", stdout);
    int kases = 10;
    printf("%d\n", kases);
    while(kases--){
        ll sz = 100000;
        printf("%d\n", sz);
        FOR(i, 1, sz){
            int o = Rand(2, 0);
            int x = Rand(1e9, 1);
            int y1 = Rand(1e9, 1), y2 = Rand(1e9, 1);
            if(o == 0) printf("%d %d %d %d\n", x, y1, x, y1);
            else printf("%d %d %d %d\n", y1, x, y2, x);
        }
    }
}
const int maxn = 1e5 + 10;
int n, m;
ll sum;
int id[maxn];
int age[maxn];
int head[maxn << 1];
struct E{
    int to, nex;
}e[maxn << 2];
bool vis[maxn << 1];
int N;
void addE(int x, int y){
    e[N].nex = head[x];
    e[N].to = y;
    head[x] = N++;
}
int stk[maxn], k;
bool dfs(int u){
    if(vis[u]) return 1;
    vis[u] = 1;
    stk[k++] = u;
    if(vis[u] && vis[u ^ 1]) return 0;
    for(int i = head[u]; ~i; i = e[i].nex){
        int v = e[i].to;
        if(!dfs(v)) return 0;
    }
    return 1;
}

bool solve(int u){
    k = 0;
    if(dfs(2 * u)) return 1;
    while(k) vis[stk[--k]] = 0;
    if(dfs(2 * u + 1)) return 1;
    return 0;
}

int main(){
    //data_gen(); return 0;
    //C(); return 0;
    int debug = 0;
    if(debug) freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    while(~scanf("%d%d", &n, &m) && n){
        sum = 0;
        FOR(i, 0, n - 1) age[i] = readint(), sum += age[i];
        FOR(i, 0, n - 1) id[i] = (ll)age[i] * n >= sum ? 0 : 1;
        clr(head, -1), N = 0;
        FOR(i, 0, m - 1){
            int x = readint() - 1, y = readint() - 1;
            //cc[i][0] = x, cc[i][1] = y;
            addE(2 * x, 2 * y + 1);
            if(id[x] == id[y]) addE(2 * x + 1, 2 * y);
            addE(2 * y, 2 * x + 1);
            if(id[x] == id[y]) addE(2 * y + 1, 2 * x);
        }
        int ok = 1;
        clr(vis, 0);
        FOR(i, 0, n - 1) if(!vis[2 * i] && !vis[2 * i + 1] && !solve(i)){
            ok = 0;
            break;
        }
        if(!ok) puts("No solution.");
        else FOR(i, 0, n - 1) putchar(!vis[2 * i + 1] ? 'C' : 'A' + id[i]), putchar('\n');
        //int res = verdict();
        //printf("verdict :: %s", res ? "ok\n" : "err\n");
    }
    return 0;
}
```
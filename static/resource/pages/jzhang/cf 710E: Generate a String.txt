KEYWORDS[[ACM/ICPC][Codeforces]]KEYWORDS

![Demo](https://www.pandox.xyz/api/db/images/jzhang/pexels-didsss-2467229.jpg "20")

## Problem Statement

At the beginning, you have the number $0$. You can either increase or decrease the number by $1$ at a cost of $x$ (when $x > 0$ ), or double the number at a cost of $y$. The question is to find the minimum cost required to reach the number $n$.

Constraints: $1 \leq x, y \leq 10^9$, $1 \leq n \leq 10^7$.

## Solution


Let the cost to reach the number $n$ be denoted as $f(n)$.

Without proof, we provide the following conclusions:

Note: The conclusions below can be derived by observing the binary representation of the number.

> If $x = y$, then:
>
> (i) If $n$ is even, then $f(n) = f(\frac{n}{2}) + y$   $(*)$ 
>
> (ii) If $n$ is odd, then $f(n) = \min(f(n - 1), f(n + 1)) + x$   $(\#)$ 

Using $(*)$ as the main formula and $(\#)$ as the recursive intermediate step, it's easy to calculate the $f$ values for all even positions, thereby determining all $f$ values.

When the relationship between $x$ and $y$ is uncertain, we only need to modify the update rule for even numbers. When $n$ is even, to calculate $f(n)$, we reduce the problem to $f(1) = x$. During this process, if the doubling operation is used, it will be optimal at this point (this is intuitive and can be proven in practice). If the doubling operation is used, it transitions to $f(n / 2)$ with a cost of $y$, whereas transitioning to $f(n / 2)$ without using the doubling operation costs $x \cdot \frac{n}{2}$. The doubling operation is used if and only if $y \leq x \cdot \frac{n}{2}$. Therefore, we update $(*)$ as follows:

> If $y \leq x \cdot \frac{n}{2}$, then $f(n) = f(\frac{n}{2}) + y$.
> 
> Otherwise, $f(n) = n \cdot x$.

Memoization can be used to solve this problem, with a space complexity of $O(n)$ and a time complexity of $O(\log(n))$.

Additionally, a solution can be found using a queue to first update the positions with lower costs, similar to a `BFS` process, with a time complexity of $O(n)$.

## Code

```cpp
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <stack>
#include <ctime>
#include <functional>
#include <cmath>
#include <iostream>
#include <assert.h>
#pragma comment(linker, "/STACK:102400000,102400000")
#define max(a, b) ((a) > (b) ? (a) : (b))
#define min(a, b) ((a) < (b) ? (a) : (b))
#define mp std :: make_pair
#define st first
#define nd second
#define keyn (root->ch[1]->ch[0])
#define lson (u << 1)
#define rson (u << 1 | 1)
#define pii std :: pair<int, int>
#define pll pair<ll, ll>
#define pb push_back
#define type(x) __typeof(x.begin())
#define foreach(i, j) for(type(j)i = j.begin(); i != j.end(); i++)
#define FOR(i, s, t) for(int i = (s); i <= (t); i++)
#define ROF(i, t, s) for(int i = (t); i >= (s); i--)
#define dbg(x) std::cout << x << std::endl
#define dbg2(x, y) std::cout << x << " " << y << std::endl
#define clr(x, i) memset(x, (i), sizeof(x))
#define maximize(x, y) x = max((x), (y))
#define minimize(x, y) x = min((x), (y))
using namespace std;
typedef long long ll;
const int int_inf = 0x3f3f3f3f;
const ll ll_inf = 0x3f3f3f3f3f3f3f3f;
const int INT_INF = (int)((1ll << 31) - 1);
const double double_inf = 1e30;
const double eps = 1e-14;
typedef unsigned long long ul;
typedef unsigned int ui;
inline int readint() {
    int x;
    scanf("%d", &x);
    return x;
}
inline int readstr(char *s) {
    scanf("%s", s);
    return strlen(s);
}

class cmpt {
public:
    bool operator () (const int &x, const int &y) const {
        return x > y;
    }
};

const int maxn = 1e7 + 10;
ll n, x, y;
ll dp[maxn];

ll cal(ll num) {
    if (dp[num] != -1) return dp[num];
    if (num == 1) return dp[num] = x;
    if (num & 1) return dp[num] = x + min(cal(num - 1), cal(num + 1));
    if ((num >> 1) * x >= y) return dp[num] = y + cal(num >> 1);
    else return dp[num] = num * x;
}

int main() {
    //data_gen(); return 0;
    //C(); return 0;
    int debug = 0;
    if (debug) freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    while (~scanf("%lld%lld%lld", &n, &x, &y)) {
        clr(dp, -1);
        ll ans = cal(n);
        printf("%lld\n", ans);
    }
    return 0;
}

//382 81437847 324871127
```
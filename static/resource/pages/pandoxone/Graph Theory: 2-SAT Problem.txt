KEYWORDS[[ACM/ICPC][Graph Theory]]KEYWORDS
## The 2-SAT Problem

The 2-SAT problem is as follows: there are $n$ Boolean variables $x_i$, and there are $m$ conditions that need to be satisfied. Each condition is in the form " $x_i$ is true/false or $x_j$ is true/false". For example, " $x_1$ is true or $x_3$ is false". Note that "or" here means that at least one of the two conditions must be true. For example, there are 3 combinations of $x_1$ and $x_3$ that satisfy " $x_1$ is true or $x_3$ is false". The goal of the 2-SAT problem is to assign a value to each variable so that all conditions are satisfied.

A common method to solve the 2-SAT problem is to construct a directed graph $G$, where each variable $x_i$ is split into two nodes, $2i$ and $2i+1$, representing $x_i$ being false and $x_i$ being true, respectively. Finally, we need to choose one node for each variable. For example, if node $2i$ is marked, it means $x_i$ is false; if node $2i+1$ is marked, it means $x_i$ is true. 

For a condition like " $x_i$ is false or $x_j$ is false", we draw a directed edge from $2i+1 \rightarrow 2j$, indicating that if node $2i+1$ is marked, then node $2j$ must also be marked. Similarly, we draw another directed edge from $2j+1 \rightarrow 2i$. For other conditions, edges can be drawn similarly. In other words, each condition corresponds to two "symmetric" edges.

Next, we consider each unassigned variable $x_i$. We first assume it to be false, then mark node $2i$, and mark all nodes that can be marked along the directed edges. If during the marking process we find that both nodes corresponding to a variable are marked, the assumption " $x_i$ is false" is invalid, and we need to change it to " $x_i$ is true" and re-mark. Note that this algorithm does not involve backtracking. If the current variable, regardless of whether it is assigned true or false, causes a contradiction, it can be proven that the entire 2-SAT problem has no solution (even adjusting the previously assigned variables won't help). This is obvious, as each variable will only affect the expressions related to that variable, so the unassigned variables must be independent of the previous assignments. For the entire problem to have a solution, each block must have a solution.

## Code
Here is the code to solve the 2-SAT problem:

```cpp
struct _2_sat{
    int n;
    vector<int> G[maxn << 1];
    bool mark[maxn << 1];
    int S[maxn << 1], c;
    bool dfs(int x){
        if(mark[x ^ 1]) return 0;
        if(mark[x]) return 1;
        mark[x] = 1;
        S[c++] = x;
        FOR(i, 0, G[x].size() - 1) if(!dfs(G[x][i])) return 0;
        return 1;
    }
    void init(int n){
        this->n = n;
        FOR(i, 0, 2 * n - 1) G[i].clear();
        clr(mark, 0);
    }
    //x = xval or y = yval
    void add_caluse(int x, int xval, int y, int yval){
        x = x * 2 + xval, y = y * 2 + yval;
        G[x ^ 1].pb(y), G[y ^ 1].pb(x);
    }
    bool solve(){
        for(int i = 0; i < 2 * n; i += 2) if(!mark[i] && !mark[i + 1]){
            c = 0;
            if(!dfs(i)){
                while(c > 0) mark[S[--c]] = 0;
                if(!dfs(i + 1)) return 0;
            }
        }
        return 1;
    }
};
```
## Relevant Exercises

LA 3713 Astronauts

```cpp
1 #include <algorithm>
  2 #include <cstdio>
  3 #include <cstring>
  4 #include <string>
  5 #include <queue>
  6 #include <map>
  7 #include <set>
  8 #include <stack>
  9 #include <ctime>
 10 #include <cmath>
 11 #include <iostream>
 12 #include <assert.h>
 13 #pragma comment(linker, "/STACK:102400000,102400000")
 14 #define max(a, b) ((a) > (b) ? (a) : (b))
 15 #define min(a, b) ((a) < (b) ? (a) : (b))
 16 #define mp std :: make_pair
 17 #define st first
 18 #define nd second
 19 #define keyn (root->ch[1]->ch[0])
 20 #define lson (u << 1)
 21 #define rson (u << 1 | 1)
 22 #define pii std :: pair<int, int>
 23 #define pll pair<ll, ll>
 24 #define pb push_back
 25 #define type(x) __typeof(x.begin())
 26 #define foreach(i, j) for(type(j)i = j.begin(); i != j.end(); i++)
 27 #define FOR(i, s, t) for(int i = (s); i <= (t); i++)
 28 #define ROF(i, t, s) for(int i = (t); i >= (s); i--)
 29 #define dbg(x) std::cout << x << std::endl
 30 #define dbg2(x, y) std::cout << x << " " << y << std::endl
 31 #define clr(x, i) memset(x, (i), sizeof(x))
 32 #define maximize(x, y) x = max((x), (y))
 33 #define minimize(x, y) x = min((x), (y))
 34 using namespace std;
 35 typedef long long ll;
 36 const int int_inf = 0x3f3f3f3f;
 37 const ll ll_inf = 0x3f3f3f3f3f3f3f3f;
 38 const int INT_INF = (int)((1ll << 31) - 1);
 39 const double double_inf = 1e30;
 40 const double eps = 1e-14;
 41 typedef unsigned long long ul;
 42 typedef unsigned int ui;
 43 inline int readint(){
 44     int x;
 45     scanf("%d", &x);
 46     return x;
 47 }
 48 inline int readstr(char *s){
 49     scanf("%s", s);
 50     return strlen(s);
 51 }
 52 
 53 class cmpt{
 54 public:
 55     bool operator () (const int &x, const int &y) const{
 56         return x > y;
 57     }
 58 };
 59 
 60 int Rand(int x, int o){
 61     //if o set, return [1, x], else return [0, x - 1]
 62     if(!x) return 0;
 63     int tem = (int)((double)rand() / RAND_MAX * x) % x;
 64     return o ? tem + 1 : tem;
 65 }
 66 ll ll_rand(ll x, int o){
 67     if(!x) return 0;
 68     ll tem = (ll)((double)rand() / RAND_MAX * x) % x;
 69     return o ? tem + 1 : tem;
 70 }
 71 
 72 void data_gen(){
 73     srand(time(0));
 74     freopen("in.txt", "w", stdout);
 75     int kases = 10;
 76     printf("%d\n", kases);
 77     while(kases--){
 78         ll sz = 100000;
 79         printf("%d\n", sz);
 80         FOR(i, 1, sz){
 81             int o = Rand(2, 0);
 82             int x = Rand(1e9, 1);
 83             int y1 = Rand(1e9, 1), y2 = Rand(1e9, 1);
 84             if(o == 0) printf("%d %d %d %d\n", x, y1, x, y1);
 85             else printf("%d %d %d %d\n", y1, x, y2, x);
 86         }
 87     }
 88 }
 89 const int maxn = 1e5 + 10;
 90 int n, m;
 91 ll sum;
 92 int id[maxn];
 93 int age[maxn];
 94 int head[maxn << 1];
 95 struct E{
 96     int to, nex;
 97 }e[maxn << 2];
 98 bool vis[maxn << 1];
 99 int N;
100 void addE(int x, int y){
101     e[N].nex = head[x];
102     e[N].to = y;
103     head[x] = N++;
104 }
105 int stk[maxn], k;
106 bool dfs(int u){
107     if(vis[u]) return 1;
108     vis[u] = 1;
109     stk[k++] = u;
110     if(vis[u] && vis[u ^ 1]) return 0;
111     for(int i = head[u]; ~i; i = e[i].nex){
112         int v = e[i].to;
113         if(!dfs(v)) return 0;
114     }
115     return 1;
116 }
117 
118 bool solve(int u){
119     k = 0;
120     if(dfs(2 * u)) return 1;
121     while(k) vis[stk[--k]] = 0;
122     if(dfs(2 * u + 1)) return 1;
123     return 0;
124 }
125 
126 int main(){
127     //data_gen(); return 0;
128     //C(); return 0;
129     int debug = 0;
130     if(debug) freopen("in.txt", "r", stdin);
131     //freopen("out.txt", "w", stdout);
132     while(~scanf("%d%d", &n, &m) && n){
133         sum = 0;
134         FOR(i, 0, n - 1) age[i] = readint(), sum += age[i];
135         FOR(i, 0, n - 1) id[i] = (ll)age[i] * n >= sum ? 0 : 1;
136         clr(head, -1), N = 0;
137         FOR(i, 0, m - 1){
138             int x = readint() - 1, y = readint() - 1;
139             //cc[i][0] = x, cc[i][1] = y;
140             addE(2 * x, 2 * y + 1);
141             if(id[x] == id[y]) addE(2 * x + 1, 2 * y);
142             addE(2 * y, 2 * x + 1);
143             if(id[x] == id[y]) addE(2 * y + 1, 2 * x);
144         }
145         int ok = 1;
146         clr(vis, 0);
147         FOR(i, 0, n - 1) if(!vis[2 * i] && !vis[2 * i + 1] && !solve(i)){
148             ok = 0;
149             break;
150         }
151         if(!ok) puts("No solution.");
152         else FOR(i, 0, n - 1) putchar(!vis[2 * i + 1] ? 'C' : 'A' + id[i]), putchar('\n');
153         //int res = verdict();
154         //printf("verdict :: %s", res ? "ok\n" : "err\n");
155     }
156     return 0;
157 }

code:
```
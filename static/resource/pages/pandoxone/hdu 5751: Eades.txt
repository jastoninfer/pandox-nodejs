KEYWORDS[[ACM/ICPC][HDU]]KEYWORDS

![demo](https://www.pandox.xyz/api/db/images/pandoxone/Dijkstra_Animation.gif "50")

## Problem Statement

Peter has a number sequence $a_1,a_2,...,a_n$ . Let $g(l,r)$ be the maximum value of the subsequence $a_l,a_{l+1},...,a_r$ and $f(l,r)=\sum_{i=l}^r {[a_i=g(l,r)]}$ . Note that $[condition]=1$ if $condition$ is true, or $0$ otherwise.

Peter wants to know the number of integer pairs $l$ and $r$ $(l\leq r)$ such that $f(l,r)=k$, for every integer $k\in\{1,2,...,n\}$.

## Solution

Consider enumerating the maximum value from large to small.
For an interval $[l, r)$ with a maximum value $M$ , the elements satisfying $a[p_i] = M$ will partition the interval into several subintervals.
The product of the lengths of these subintervals contributes equally to one term of the answer.

A brute-force enumeration requires $O(n^2)$ time.
However, when considering the product of subinterval pairs that contribute to a term of the answer, they satisfy the properties of convolution.
Therefore, we can optimize the time to $O(n \log(n))$ by performing a polynomial multiplication using `FFT (Fast Fourier Transform)` on the length sequence and its reverse sequence.
The subintervals can then be processed recursively.

## Code

```cpp
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <stack>
#include <ctime>
#include <cmath>
#include <iostream>
#include <assert.h>
#pragma comment(linker, "/STACK:102400000,102400000")
#define max(a, b) ((a) > (b) ? (a) : (b))
#define min(a, b) ((a) < (b) ? (a) : (b))
#define mp std :: make_pair
#define st first
#define nd second
#define keyn (root->ch[1]->ch[0])
#define lson (u << 1)
#define rson (u << 1 | 1)
#define pii std :: pair<int, int>
#define pll pair<ll, ll>
#define pb push_back
#define type(x) __typeof(x.begin())
#define foreach(i, j) for(type(j)i = j.begin(); i != j.end(); i++)
#define FOR(i, s, t) for(int i = (s); i <= (t); i++)
#define ROF(i, t, s) for(int i = (t); i >= (s); i--)
#define dbg(x) std::cout << x << std::endl
#define dbg2(x, y) std::cout << x << " " << y << std::endl
#define clr(x, i) memset(x, (i), sizeof(x))
#define maximize(x, y) x = max((x), (y))
#define minimize(x, y) x = min((x), (y))
using namespace std;
typedef long long ll;
const int int_inf = 0x3f3f3f3f;
const ll ll_inf = 0x3f3f3f3f3f3f3f3f;
const int INT_INF = (int)((1ll << 31) - 1);
const double double_inf = 1e30;
const double eps = 1e-14;
typedef unsigned long long ul;
typedef unsigned int ui;
inline int readint(){
    int x;
    scanf("%d", &x);
    return x;
}
inline int readstr(char *s){
    scanf("%s", s);
    return strlen(s);
}

class cmpt{
public:
    bool operator () (const int &x, const int &y) const{
        return x > y;
    }
};

struct cmpx{
    bool operator () (int x, int y) { return x > y; }
};
const int maxn = 6e4 + 10;
int a[maxn];
int n;
struct Seg{
    int l, r, v;
}seg[maxn << 2];
void build(int u, int l, int r){
    seg[u].l = l, seg[u].r = r;
    if(seg[u].r - seg[u].l < 2){
        seg[u].v = l;
        return;
    }
    int mid = (l + r) >> 1;
    build(lson, l, mid), build(rson, mid, r);
    if(a[seg[rson].v] > a[seg[lson].v]) seg[u].v = seg[rson].v;
    else seg[u].v = seg[lson].v;
}
int query(int u, int l, int r){
    if(seg[u].l == l && seg[u].r == r) return seg[u].v;
    int mid = (seg[u].l + seg[u].r) >> 1;
    if(r <= mid) return query(lson, l, r);
    else if(l >= mid) return query(rson, l, r);
    int lhs = query(lson, l, mid), rhs = query(rson, mid, r);
    if(a[rhs] > a[lhs]) return rhs;
    return lhs;
}
int maxi;
vector<int> pos[maxn];
int idx[maxn];
void init(){
    maxi = -1;
    FOR(i, 1, n) maximize(maxi, a[i]);
    FOR(i, 1, maxi) pos[i].clear();
    FOR(i, 1, n){
        int sz = pos[a[i]].size();
        idx[i] = sz;
        pos[a[i]].pb(i);
    }
}
ll z[maxn];
ll c[maxn], d[maxn], e[maxn << 1];
int k;
const double PI = 2 * asin(1.);
struct Complex{
    double x, y;
    Complex(double x = 0, double y = 0) : x(x), y(y) {}
};
Complex operator + (const Complex &lhs, const Complex &rhs){
    return Complex(lhs.x + rhs.x, lhs.y + rhs.y);
}
Complex operator - (const Complex &lhs, const Complex &rhs){
    return Complex(lhs.x - rhs.x, lhs.y - rhs.y);
}
Complex operator * (const Complex &lhs, const Complex &rhs){
    double tl = lhs.x * rhs.x, tr = lhs.y * rhs.y, tt = (lhs.x + lhs.y) * (rhs.x + rhs.y);
    return Complex(lhs.x * rhs.x - lhs.y * rhs.y, lhs.x * rhs.y + lhs.y * rhs.x);
}
Complex w[2][maxn << 2], x[maxn << 2], y[maxn << 2];

void fft(Complex x[], int k, int v){
    int i, j, l;
    Complex tem;
    for(i = j = 0; i < k; i++){
        if(i > j) tem = x[i], x[i] = x[j], x[j] = tem;
        for(l = k >> 1; (j ^= l) < l; l >>= 1) ;
    }
    for(i = 2; i <= k; i <<= 1) for(j = 0; j < k; j += i) for(l = 0; l < i >> 1; l++){
        tem = x[j + l + (i >> 1)] * w[v][k / i * l];
        x[j + l + (i >> 1)] = x[j + l] - tem;
        x[j + l] = x[j + l] + tem;
    }
}
int tot;
void solve(int l, int r){
    if(l >= r) return;
    if(r - l == 1){
        ++z[1];
        return;
    }
    int p = query(1, l, r);
    int tem = idx[p];
    int sz = pos[a[p]].size();
    k = 0;
    c[k++] = p - l + 1;
    while(tem  + 1 < sz && pos[a[p]][tem + 1] < r) c[k++] = pos[a[p]][tem + 1] - pos[a[p]][tem], ++tem;
    c[k++] = r - pos[a[p]][tem];
    ROF(i, k - 1, 0) d[i] = c[k - 1 - i];
    int len;
    for(len = 1; len < (k << 1); len <<= 1) ;
    FOR(i, 0, len) w[1][len - i] = w[0][i] = Complex(cos(PI * 2 * i / len), sin(PI * 2 * i / len));
    FOR(i, 0, k - 1) x[i] = Complex(c[i], 0);
    FOR(i, k, len - 1) x[i] = Complex(0, 0);
    fft(x, len, 0);
    FOR(i, 0, k - 1) y[i] = Complex(d[i], 0);
    FOR(i, k, len - 1) y[i] = Complex(0, 0);
    fft(y, len, 0);
    FOR(i, 0, len - 1) x[i] = x[i] * y[i];
    fft(x, len, 1);
    FOR(i, 0, 2 * k - 2) e[i] = (ll)(x[i].x / len + .5);
    FOR(i, 0, k - 2) z[k - 1 - i] += e[i];
    tem = idx[p];
    solve(l, p);
    while(tem + 1 < sz && pos[a[p]][tem + 1] < r) solve(pos[a[p]][tem] + 1, pos[a[p]][tem + 1]), ++tem;
    solve(pos[a[p]][tem] + 1, r);
}
int main(){
    //data_gen(); return 0;
    //C(); return 0;
    int debug = 0;
    if(debug) freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    int T = readint();
    while(T--){
        n = readint();
        FOR(i, 1, n) a[i] = readint();
        build(1, 1, n + 1);
        init();
        clr(z, 0);
        tot = 0;
        solve(1, n + 1);
        ll ans = 0;
        FOR(i, 1, n) ans += z[i] ^ i;
        printf("%lld\n", ans);
    }
    return 0;
}
```
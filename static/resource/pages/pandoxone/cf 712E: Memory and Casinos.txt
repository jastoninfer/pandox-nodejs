KEYWORDS[[ACM/ICPC][CF]]KEYWORDS
## Problem Statement

There is a row of $n(n \leq 100000)$ squares. The value of the $i$ -th square from left to right is $p_i(p_i = \frac{a}{b}, 1 \leq a < b \leq 10^9)$. There are two types of operations: one is to update the value of a square to another rational number, and the other is to find the weight $w(l, r)$ of the interval $[l, r](l \leq r)$.

The weight $w(l, r)$ is defined as follows:

A square at position $i$ has a probability $p_i$ of moving one step to the right and a probability $1-p_i$ of moving one step to the left. $w(l, r)$ represents the probability that a square starting at position $l$ moves to the right to position $r$ (ending at position $r+1$) without exceeding the boundaries of the interval during the process.

## Analysis

For any interval $[l, r]$, let $f(i)$ denote the probability that a square currently at position $i$ reaches the end state within the boundaries of the interval. Clearly, we have $f(i) = p_i f(i + 1) + (1 - p_i) f(i - 1)$. Note the boundary conditions: $f(l - 1) = 0$ and $f(r + 1) = 1$. Let's set $w(l, r) = f(l) = \Delta$. Thus, we can derive the recurrence relation $f(r + 1) = 1 = g(r + 1) + f(r - 1)$, where $g(r + 1) = \frac{\prod_{i \leq r - 1}(1 - p_i)}{\prod_{i \leq r}p_i}$.

In theory, we can use the prefix sum of $g(i)$ to get the sum for any interval and maintain the sums of odd and even positions separately with a segment tree. However, since $g(i)$ can be extremely large, the storage using double precision might fail, making this approach infeasible.

We solve this problem using a classification and statistical method by considering the relationship between small-scale and large-scale problems. For any position $m$ in $[l, r]$, we discuss the number of times a square crosses $m$ (geometric summation), and thus derive the recursive relationship with local additive properties. We use point updates and interval queries on the segment tree. The complexity for a single query is $O(log(n))$.

 

## Code

```cpp
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <stack>
#include <ctime>
#include <cmath>
#include <iostream>
#include <assert.h>
#pragma comment(linker, "/STACK:102400000,102400000")
#define max(a, b) ((a) > (b) ? (a) : (b))
#define min(a, b) ((a) < (b) ? (a) : (b))
#define mp std :: make_pair
#define st first
#define nd second
#define keyn (root->ch[1]->ch[0])
#define lson (u << 1)
#define rson (u << 1 | 1)
#define pii std :: pair<int, int>
#define pll pair<ll, ll>
#define pb push_back
#define type(x) __typeof(x.begin())
#define foreach(i, j) for(type(j)i = j.begin(); i != j.end(); i++)
#define FOR(i, s, t) for(int i = (s); i <= (t); i++)
#define ROF(i, t, s) for(int i = (t); i >= (s); i--)
#define dbg(x) std::cout << x << std::endl
#define dbg2(x, y) std::cout << x << " " << y << std::endl
#define clr(x, i) memset(x, (i), sizeof(x))
#define maximize(x, y) x = max((x), (y))
#define minimize(x, y) x = min((x), (y))
using namespace std;
typedef long long ll;
const int int_inf = 0x3f3f3f3f;
const ll ll_inf = 0x3f3f3f3f3f3f3f3f;
const int INT_INF = (int)((1ll << 31) - 1);
const double double_inf = 1e30;
const double eps = 1e-14;
typedef unsigned long long ul;
typedef unsigned int ui;
inline int readint() {
    int x;
    scanf("%d", &x);
    return x;
}
inline int readstr(char *s) {
    scanf("%s", s);
    return strlen(s);
}

class cmpt {
public:
    bool operator () (const int &x, const int &y) const {
        return x > y;
    }
};

int Rand(int x, int o) {
    //if o set, return [1, x], else return [0, x - 1]
    if (!x) return 0;
    int tem = (int)((double)rand() / RAND_MAX * x) % x;
    return o ? tem + 1 : tem;
}
ll ll_rand(ll x, int o) {
    if (!x) return 0;
    ll tem = (ll)((double)rand() / RAND_MAX * x) % x;
    return o ? tem + 1 : tem;
}

void data_gen() {
    srand(time(0));
    freopen("in.txt", "w", stdout);
    int kases = 1;
    //printf("%d\n", kases);
    while (kases--) {
        ll sz = 1000;
        printf("%d %d\n", sz, sz);
        FOR(i, 1, sz) {
            int x = Rand(1e2, 1);
            int y = Rand(1e9, 1);
            if (x > y) swap(x, y);
            printf("%d %d\n", x, y);
        }
        FOR(i, 1, sz) {
            int o = Rand(2, 0);
            if (o) {
                printf("1 ");
                int pos = Rand(1000, 1);
                int x = Rand(1e9, 1), y = Rand(1e9, 1);
                if (x > y) swap(x, y);
                printf("%d %d %d\n", pos, x, y);
            } else {
                printf("2 ");
                int x = Rand(1000, 1), y = Rand(1e3, 1);
                if (x > y) swap(x, y);
                printf("%d %d\n", x, y);
            }
        }
    }
}

const int maxn = 1e5 + 10;
struct Seg {
    double l1, l2, r1, r2;
}seg[maxn << 2];
int n, q;
pii a[maxn];

void push_up(int u) {
    seg[u].l2 = seg[lson].l2 * seg[rson].l2 / (1 - seg[lson].r1 * seg[rson].l1);
    seg[u].l1 = seg[lson].l1 + seg[lson].l2 * seg[lson].r2 * seg[rson].l1 / (1 - seg[lson].r1 * seg[rson].l1);
    seg[u].r1 = seg[rson].r1 + seg[rson].r2 * seg[rson].l2 * seg[lson].r1 / (1 - seg[lson].r1 * seg[rson].l1);
    seg[u].r2 = seg[lson].r2 * seg[rson].r2 / (1 - seg[lson].r1 * seg[rson].l1);
}

double query1(int u, int l, int r, int L, int R);
double query3(int u, int l, int r, int L, int R);
double query4(int u, int l, int r, int L, int R);

double query(int u, int l, int r, int L, int R) {
    if (l == L && R == r) return seg[u].l2;
    int mid = (l + r) >> 1;
    if (R <= mid) return query(lson, l, mid, L, R);
    else if (L >= mid) return query(rson, mid, r, L, R);
    double lhs = query(lson, l, mid, L, mid), rhs = query(rson, mid, r, mid, R);
    double L1 = query1(rson, mid, r, mid, R), R1 = query3(lson, l, mid, L, mid);
    return lhs * rhs / (1. - L1 * R1);
}

double query3(int u, int l, int r, int L, int R) {
    if (l == L && r == R) return seg[u].r1;
    int mid = (l + r) >> 1;
    if (R <= mid) return query3(lson, l, mid, L, R);
    else if (L >= mid) return query3(rson, mid, r, L, R);
    double tem = query3(rson, mid, r, mid, R);
    double R2 = query4(rson, mid, r, mid, R);
    double R1 = query3(lson, l, mid, L, mid);
    double L2 = query(rson, mid, r, mid, R);
    double L1 = query1(rson, mid, r, mid, R);
    return tem + R2 * R1 * L2 / (1. - L1 * R1);
}

double query4(int u, int l, int r, int L, int R) {
    if (l == L && r == R) return seg[u].r2;
    int mid = (l + r) >> 1;
    if (R <= mid) return query4(lson, l, mid, L, R);
    else if (L >= mid) return query4(rson, mid, r, L, R);
    double lhs = query4(lson, l, mid, L, mid) * query4(rson, mid, r, mid, R);
    double rhs = query3(lson, l, mid, L, mid) * query3(rson, mid, r, mid, R);
    return lhs / (1. - rhs);
}

double query1(int u, int l, int r, int L, int R) {
    if (l == L && R == r) return seg[u].l1;
    int mid = (l + r) >> 1;
    if (R <= mid) return query1(lson, l, mid, L, R);
    else if (L >= mid) return query1(rson, mid, r, L, R);
    double tem = query1(lson, l, mid, L, mid);
    double L1 = query1(rson, mid, r, mid, R);
    double L2 = query(lson, l, mid, L, mid);
    double R2 = query4(lson, l, mid, L, mid);
    double R1 = query3(lson, l, mid, L, mid);
    return tem + L2 * L1 * R2 / (1. - R1 * L1);
}

void build(int u, int l, int r) {
    if (r - l < 2) {
        double p = (double)a[l].first / a[l].nd;
        seg[u].l1 = 1 - p;
        seg[u].l2 = p;
        seg[u].r1 = p;
        seg[u].r2 = 1 - p;
        return;
    }
    int mid = (l + r) >> 1;
    build(lson, l, mid), build(rson, mid, r);
    push_up(u);
}

void update(int u, int l, int r, int L, int R, int lhs, int rhs) {
    if (l == L && r == R) {
        double p = (double)lhs / rhs;
        seg[u].l1 = 1 - p;
        seg[u].l2 = p;
        seg[u].r1 = p;
        seg[u].r2 = 1 - p;
        return;
    }
    int mid = (l + r) >> 1;
    if (R <= mid) update(lson, l, mid, L, R, lhs, rhs);
    else update(rson, mid, r, L, R, lhs, rhs);
    push_up(u);
}

double __get(int x, int y) {
    return query(1, 1, n + 1, x, y + 1);
}

void __set(int x, int y, int z) {
    update(1, 1, n + 1, x, x + 1, y, z);
}

int main() {
    //data_gen(); return 0;
    //C(); return 0;
    int debug = 0;
    if (debug) freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    while (~scanf("%d%d", &n, &q)) {
        FOR(i, 1, n) scanf("%d%d", &a[i].first, &a[i].nd);
        build(1, 1, n + 1);
        FOR(i, 1, q) {
            int op, x, y, z;
            scanf("%d%d%d", &op, &x, &y);
            if (op == 1) {
                z = readint();
                __set(x, y, z);
            } else {
                double ans = __get(x, y);
                printf("%.10f\n", ans);
            }
        }
    }
    return 0;
}
```
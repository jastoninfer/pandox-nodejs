KEYWORDS[[ACM/ICPC][HDU]]KEYWORDS

![demo](https://www.pandox.xyz/api/db/images/pandoxone/pexels-nextvoyage-1470405.jpg "30")

## Problem Statement

For a given $n \times m $ matrix $M$ , define $S(a,b)$ as the sum of weights of all $a \times b$ submatrices of $M$ .
The weight of a matrix refers to the sum of the weights of all saddle points in the matrix.
A point in a matrix is a saddle point if and only if it is the only minimum in its row and the only maximum in its column.

Now input matrix $M$ and compute $W= \sum\sum{abS(a,b)}, 1 \leq a \leq n, 1 \leq b \leq m$ .
The data range is $1 \leq n, m \leq 1000, 0 \leq M(i, j) \leq 1000000$ .

## Solution

Consider the contribution of each saddle point to the answer $W$ . The answer can be rewritten as the sum of the products of the weight of each saddle point and the area of its corresponding submatrix. For a point located at row $i$ and column $j$ , let $y_1$ be the number of points directly above this point in column $j$, such that all points except for $(i, j)$ have weights that are strictly less than the weight at $(i, j)$, and assume $y_1$ is the maximum. Let $y_1$ represent the maximum upward association length for this point.

Similarly, we can obtain the maximum association lengths downward, leftward, and rightward.
Clearly, these lengths are at least $1$ .
By considering the order of left, right, up, and down, we can derive a quadruple $(x_1, x_2, y_1, y_2)$ corresponding to $(i, j)$, where these four directions correspond to the coordinate axes and the point itself corresponds to the origin, thus creating four so-called quadrants.

If this point is a saddle point within a certain submatrix, the top-left corner of that submatrix must lie in the second quadrant, and the bottom-right corner must lie in the fourth quadrant (this can be intuitively observed through a diagram). The total area of all submatrices is given by 

$$
g(i, j) = \sum\sum\sum\sum{(p + q + 1)(r + s + 1)}
$$

where $ p, q, r, s $ independently take values in $ [0, x_1), [0, x_2), [0, y_1), [0, y_2) $ respectively. It is straightforward to expand this to obtain an algebraic expression in terms of $x_1, x_2, y_1, y_2$ . Therefore, the final answer should be 

$$
\sum\sum{g(i, j)w(i, j)}
$$

where $w$ is the weight function. Now, we only need to compute the quadruple for each point, which can be done using an `RMQ (Range Minimum Query)` combined with binary search method (although this approach is not optimal). Thus, the complexity of our algorithm is $O(n^2 \log(n))$ . We can use unsigned int for modular operations, allowing natural overflow.

## Code

```cpp
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <stack>
#include <ctime>
#include <cmath>
#include <iostream>
#include <assert.h>
#define PI acos(-1.)
#pragma comment(linker, "/STACK:102400000,102400000")
#define max(a, b) ((a) > (b) ? (a) : (b))
#define min(a, b) ((a) < (b) ? (a) : (b))
#define mp std :: make_pair
#define st first
#define nd second
#define keyn (root->ch[1]->ch[0])
#define lson (u << 1)
#define rson (u << 1 | 1)
#define pii std :: pair<int, int>
#define pll pair<ll, ll>
#define pb push_back
#define type(x) __typeof(x.begin())
#define foreach(i, j) for(type(j)i = j.begin(); i != j.end(); i++)
#define FOR(i, s, t) for(int i = (s); i <= (t); i++)
#define ROF(i, t, s) for(int i = (t); i >= (s); i--)
#define dbg(x) std::cout << x << std::endl
#define dbg2(x, y) std::cout << x << " " << y << std::endl
#define clr(x, i) memset(x, (i), sizeof(x))
#define maximize(x, y) x = max((x), (y))
#define minimize(x, y) x = min((x), (y))
using namespace std;
typedef long long ll;
const int int_inf = 0x3f3f3f3f;
const ll ll_inf = 0x3f3f3f3f3f3f3f3f;
const int INT_INF = (int)((1ll << 31) - 1);
const double double_inf = 1e30;
const double eps = 1e-14;
typedef unsigned long long ul;
typedef unsigned int ui;

struct cmpx{
    bool operator () (int x, int y) { return x > y; }
};
const int maxn = 1e3 + 10;
ui mt[maxn][maxn];
ui x1[maxn][maxn], x2[maxn][maxn], y1[maxn][maxn], y2[maxn][maxn];
int n, m;
ui bg[maxn][15];
ui query(int l, int r, int o){
    int len = (r - l + 1);
    int i = 0;
    while((1 << i) <= len) ++i;
    --i;
    int sp = r - (1 << i) + 1;
    if(o) return max(bg[l][i], bg[sp][i]);
    else return min(bg[l][i], bg[sp][i]);
}
int main(){
    //data_gen(); return 0;
    //C(); return 0;
    int debug = 0;
    if(debug) freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    int T = readint();
    while(T--){
        scanf("%d%d", &n, &m);
        FOR(i, 1, n) FOR(j, 1, m) scanf("%u", &mt[i][j]);
        FOR(i, 1, n) FOR(j, 1, m) x1[i][j] = x2[i][j] = y1[i][j] = y2[i][j] = 1;
        FOR(i, 1, n){
            FOR(j, 1, m) bg[j][0] = mt[i][j];
            for(int i = 1; (1 << i) <= m; i++){
                int len = 1 << i;
                for(int j = 1; j + len - 1 <= m; j++) bg[j][i] = min(bg[j][i - 1], bg[j + len / 2][i - 1]);
            }
            FOR(j, 1, m){
                if(j == 1 || mt[i][j] >= mt[i][j - 1]) continue;
                int l = 0, r = j - 1;
                while(r - l > 1){
                    int mid = (l + r) >> 1;
                    ui tem = query(mid, r, 0);
                    if(tem > mt[i][j]) r = mid;
                    else l = mid;
                }
                x1[i][j] = j - r + 1;
            }
            FOR(j, 1, m){
                if(j == m || mt[i][j] >= mt[i][j + 1]) continue;
                int l = j + 1, r = m + 1;
                while(r - l > 1){
                    int mid = (l + r) >> 1;
                    ui tem = query(l, mid, 0);
                    if(tem > mt[i][j]) l = mid;
                    else r = mid;
                }
                x2[i][j] = l - j + 1;
            }
        }
        FOR(j, 1, m){
            FOR(i, 1, n) bg[i][0] = mt[i][j];
            for(int i = 1; (1 << i) <= n; i++){
                int len = 1 << i;
                for(int j = 1; j + len - 1 <= n; j++) bg[j][i] = max(bg[j][i - 1], bg[j + len / 2][i - 1]);
            }
            FOR(i, 1, n){
                if(i == 1 || mt[i][j] <= mt[i - 1][j]) continue;
                int l = 0, r = i - 1;
                while(r - l > 1){
                    int mid = (l + r) >> 1;
                    ui tem = query(mid, r, 1);
                    if(tem < mt[i][j]) r = mid;
                    else l = mid;
                }
                y1[i][j] = i - r + 1;
            }
            FOR(i, 1, n){
                if(i == n || mt[i][j] <= mt[i + 1][j]) continue;
                int l = i + 1, r = n + 1;
                while(r - l > 1){
                    int mid = (l + r) >> 1;
                    ui tem = query(l, mid, 1);
                    if(tem < mt[i][j]) l = mid;
                    else r = mid;
                }
                y2[i][j] = l - i + 1;
            }
        }
        ui ans = 0;
        FOR(i, 1, n) FOR(j, 1, m){
            ui X1 = x1[i][j] * (x1[i][j] - 1) / 2;
            ui X2 = x2[i][j] * (x2[i][j] - 1) / 2;
            ui Y1 = y1[i][j] * (y1[i][j] - 1) / 2;
            ui Y2 = y2[i][j] * (y2[i][j] - 1) / 2;
            ui _x1 = x1[i][j], _x2 = x2[i][j], _y1 = y1[i][j], _y2 = y2[i][j];
            ui para = _x2 * _y2 * X1 * Y1 + X1 * Y2 * _x2 * _y1 + X2 * Y1 * _x1 * _y2 + X2 * Y2 * _x1 * _y1;
            para += X1 * _x2 * _y1 * _y2 + X2 * _x1 * _y1 * _y2 + Y1 * _x1 * _x2 * _y2 + Y2 * _x1 * _x2 * _y1;
            para += _x1 * _y1 * _y2 * _x2;
            ans += para * mt[i][j];
        }
        printf("%u\n", ans);
    }
    return 0;
}
```